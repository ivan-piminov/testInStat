{"version":3,"sources":["componenets/NewTask/NewTask.tsx","redux/action.ts","componenets/ItemTask/ItemTask.tsx","componenets/TasksList/TasksList.tsx","App.tsx","reportWebVitals.js","redux/reducer.ts","redux/store.ts","index.tsx"],"names":["NewTask","useState","state","setState","dispatch","useDispatch","addNewTask","e","taskName","length","preventDefault","type","id","Math","random","isDone","useEffect","search","className","placeholder","value","onChange","target","onClick","ItemTask","checked","changeStatus","currentTarget","TasksList","searchData","useSelector","data","tasks","filter","i","includes","map","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","task","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.eb3b476e.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTask, searchTask} from \"../../redux/action\";\r\n\r\nexport const NewTask = () => {\r\n    const [state, setState] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const addNewTask = (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n        if (state.length) {\r\n            e.preventDefault();\r\n            dispatch(addTask(state));\r\n            setState('')\r\n        } else e.preventDefault()\r\n    }\r\n\r\n    useEffect((): any => dispatch(searchTask(state)), [dispatch, state])\r\n\r\n    return (\r\n        <form className='mt-3 form-group d-flex'>\r\n            <input className='form-control mr-2' type=\"text\" placeholder='введите название задачи' value={state}\r\n                   onChange={(e) => {\r\n                       setState(e.target.value)\r\n                   }}/>\r\n            <button className='btn btn-primary' onClick={(e) => addNewTask(e)} type='submit'>Добавить</button>\r\n        </form>\r\n    )\r\n}","import {AddTaskType, ChangeStatusType, SearchType} from \"./reducer\";\r\n\r\nexport const addTask = (taskName: string): AddTaskType => {\r\n    return {\r\n        type: 'ADD_TASK',\r\n        NewTask: {\r\n            id: Math.random(),\r\n            taskName,\r\n            isDone: false\r\n        }\r\n    }\r\n}\r\nexport const changeStatus = (id: number, isDone: boolean): ChangeStatusType => {\r\n    return {\r\n        type: 'CHANGE_STATUS',\r\n        id,\r\n        isDone\r\n    }\r\n}\r\nexport const searchTask = (data:string): SearchType=>{\r\n    return{\r\n        type: 'SEARCH_TASK',\r\n        search:data\r\n    }\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeStatus} from \"../../redux/action\";\r\nimport {TaskType} from \"../../entities\";\r\n\r\nexport const ItemTask = ({isDone, taskName, id}: TaskType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeStatus(id, e.currentTarget.checked))\r\n    }\r\n    return (\r\n        <div className=\"card mb-2\">\r\n            <div className=\"card-body\">\r\n                <div className=\"input-group border\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\">\r\n                            <input type=\"checkbox\" checked={isDone} onChange={changeStatusHandler}/>\r\n                        </div>\r\n                        <div className='ml-2'>{taskName}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {ItemTask} from \"../ItemTask/ItemTask\";\r\nimport {TaskType} from \"../../entities\";\r\nimport {InitialStateType} from \"../../redux/reducer\";\r\n\r\n\r\nexport const TasksList=()=>{\r\n    const searchData = useSelector((state:InitialStateType) => state.search)\r\n    const data = useSelector((state:InitialStateType) => state.tasks.filter(i => i.taskName.includes(searchData)))\r\n\r\n    if(data.length === 0){\r\n        return <p> Упс! Ничего не найдено!</p>\r\n    }\r\n    const tasks = data.map((item:TaskType) => {return <ItemTask key={item.id+Math.random()} id={item.id} taskName={item.taskName} isDone={item.isDone}/>} )\r\n    return(\r\n       <div>{tasks}</div>\r\n    )\r\n}","import './App.css';\nimport * as React from \"react\";\nimport {NewTask} from './componenets/NewTask/NewTask'\nimport {TasksList} from \"./componenets/TasksList/TasksList\";\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <NewTask/>\n            <TasksList/>\n        </div>\n    );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {TaskType} from \"../entities\";\r\n\r\nconst ADD_TASK = 'ADD_TASK'\r\nconst CHANGE_STATUS = 'CHANGE_STATUS'\r\nconst SEARCH_TASK = 'SEARCH_TASK'\r\n\r\n\r\nexport type InitialStateType = {\r\n    tasks: Array<TaskType>,\r\n    search: string\r\n}\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    tasks: [],\r\n    search: ''\r\n}\r\nexport type AddTaskType = {\r\n    type: typeof ADD_TASK,\r\n    NewTask: {\r\n        id: number,\r\n        taskName: string\r\n        isDone: boolean\r\n    }\r\n}\r\nexport type ChangeStatusType = {\r\n    type: typeof CHANGE_STATUS,\r\n    id: number,\r\n    isDone: boolean,\r\n}\r\nexport type SearchType = {\r\n    type: typeof SEARCH_TASK,\r\n    search: string\r\n}\r\n\r\ntype CommonActionTypes = AddTaskType | ChangeStatusType | SearchType\r\n\r\nexport const reducer = (state: InitialStateType = initialState, action: CommonActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, action.NewTask]\r\n            }\r\n        case \"CHANGE_STATUS\":\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks.map((task: TaskType) => {\r\n                    if (task.id === action.id) return {...task, isDone: action.isDone}\r\n                    else return task\r\n                })\r\n                ]\r\n            }\r\n        case \"SEARCH_TASK\":\r\n            return {\r\n                ...state,\r\n                search: action.search,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\n\r\nexport const store = createStore(reducer);","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}